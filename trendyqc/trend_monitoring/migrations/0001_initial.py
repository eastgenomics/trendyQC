# Generated by Django 4.2.8 on 2024-11-18 10:16

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Alignment_summary_metrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=10)),
                ('total_reads', models.FloatField()),
                ('pf_reads', models.FloatField()),
                ('pct_pf_reads', models.FloatField()),
                ('pf_noise_reads', models.FloatField()),
                ('pf_reads_aligned', models.FloatField()),
                ('pct_pf_reads_aligned', models.FloatField()),
                ('pf_aligned_bases', models.FloatField()),
                ('pf_hq_aligned_reads', models.FloatField()),
                ('pf_hq_aligned_bases', models.FloatField()),
                ('pf_hq_aligned_q20_bases', models.FloatField()),
                ('pf_hq_median_mismatches', models.FloatField()),
                ('pf_mismatch_rate', models.FloatField()),
                ('pf_hq_error_rate', models.FloatField()),
                ('pf_indel_rate', models.FloatField()),
                ('mean_read_length', models.FloatField()),
                ('reads_aligned_in_pairs', models.FloatField()),
                ('pct_reads_aligned_in_pairs', models.FloatField()),
                ('pf_reads_improper_pairs', models.FloatField(null=True)),
                ('pct_pf_reads_improper_pairs', models.FloatField(null=True)),
                ('bad_cycles', models.FloatField()),
                ('strand_balance', models.FloatField()),
                ('pct_chimeras', models.FloatField()),
                ('pct_adapter', models.FloatField()),
            ],
            options={
                'db_table': 'alignment_summary_metrics',
            },
        ),
        migrations.CreateModel(
            name='Base_distribution_by_cycle_metrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lane', models.CharField(max_length=20)),
                ('sample_read', models.CharField(max_length=20)),
                ('sum_pct_a', models.FloatField()),
                ('sum_pct_c', models.FloatField()),
                ('sum_pct_g', models.FloatField()),
                ('sum_pct_t', models.FloatField()),
                ('sum_pct_n', models.FloatField()),
                ('cycle_count', models.IntegerField()),
                ('mean_pct_a', models.FloatField()),
                ('mean_pct_c', models.FloatField()),
                ('mean_pct_g', models.FloatField()),
                ('mean_pct_t', models.FloatField()),
            ],
            options={
                'db_table': 'base_distribution_by_cycle_metrics',
            },
        ),
        migrations.CreateModel(
            name='Bcl2fastq_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total', models.BigIntegerField(null=True)),
                ('total_yield', models.BigIntegerField(null=True)),
                ('perfect_index', models.BigIntegerField(null=True)),
                ('yield_Q30', models.BigIntegerField(null=True)),
                ('qscore_sum', models.BigIntegerField(null=True)),
                ('r1_yield', models.BigIntegerField(null=True)),
                ('r1_Q30', models.BigIntegerField(null=True)),
                ('r1_trimmed_bases', models.BigIntegerField(null=True)),
                ('r2_yield', models.BigIntegerField(null=True)),
                ('r2_Q30', models.BigIntegerField(null=True)),
                ('r2_trimmed_bases', models.BigIntegerField(null=True)),
                ('pct_Q30', models.FloatField(null=True)),
                ('pct_perfect_index', models.FloatField(null=True)),
                ('mean_qscore', models.FloatField(null=True)),
            ],
            options={
                'db_table': 'bcl2fastq_data',
            },
        ),
        migrations.CreateModel(
            name='Custom_coverage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cov_200x', models.FloatField(null=True)),
                ('cov_250x', models.FloatField(null=True)),
                ('cov_300x', models.FloatField(null=True)),
                ('cov_500x', models.FloatField(null=True)),
                ('cov_1000x', models.FloatField(null=True)),
                ('usable_unique_bases_on_target', models.FloatField(null=True)),
            ],
            options={
                'db_table': 'custom_coverage',
            },
        ),
        migrations.CreateModel(
            name='Duplication_metrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unpaired_reads_examined', models.FloatField()),
                ('read_pairs_examined', models.FloatField()),
                ('secondary_or_suplementary_rds', models.FloatField()),
                ('unmapped_reads', models.FloatField()),
                ('unpaired_read_duplicates', models.FloatField()),
                ('read_pair_duplicates', models.FloatField()),
                ('read_pair_optical_duplicates', models.FloatField()),
                ('pct_duplication', models.FloatField()),
                ('estimated_library_size', models.FloatField()),
                ('reads_in_duplicate_pairs', models.FloatField()),
                ('reads_in_unique_pairs', models.FloatField()),
                ('reads_in_unique_unpaired', models.FloatField()),
                ('reads_in_duplicate_pairs_optical', models.FloatField()),
                ('reads_in_duplicate_pairs_nonoptical', models.FloatField()),
                ('reads_in_duplicate_unpaired', models.FloatField()),
                ('reads_unmapped', models.FloatField()),
            ],
            options={
                'db_table': 'duplication_metrics',
            },
        ),
        migrations.CreateModel(
            name='Fastqc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('user', models.CharField(max_length=100)),
                ('content', models.TextField()),
            ],
            options={
                'db_table': 'filter',
            },
        ),
        migrations.CreateModel(
            name='GC_bias_metrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accumulation_level', models.CharField(max_length=20)),
                ('reads_used', models.CharField(max_length=10)),
                ('window_size', models.IntegerField()),
                ('total_clusters', models.IntegerField()),
                ('aligned_reads', models.IntegerField()),
                ('at_dropout', models.FloatField()),
                ('gc_dropout', models.FloatField()),
                ('gc_nc_0_19', models.FloatField()),
                ('gc_nc_20_39', models.FloatField()),
                ('gc_nc_40_59', models.FloatField()),
                ('gc_nc_60_79', models.FloatField()),
                ('gc_nc_80_100', models.FloatField()),
            ],
            options={
                'db_table': 'gc_bias_metrics',
            },
        ),
        migrations.CreateModel(
            name='Happy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'happy',
            },
        ),
        migrations.CreateModel(
            name='Happy_indel_all',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_indel', models.CharField(max_length=10)),
                ('truth_total_indel', models.IntegerField()),
                ('truth_tp_indel', models.IntegerField()),
                ('truth_fn_indel', models.IntegerField()),
                ('query_total_indel', models.IntegerField()),
                ('query_fp_indel', models.IntegerField()),
                ('query_unk_indel', models.IntegerField()),
                ('fp_gt_indel', models.IntegerField()),
                ('metric_recall_indel', models.FloatField()),
                ('metric_precision_indel', models.FloatField()),
                ('metric_frac_na_indel', models.FloatField()),
                ('metric_f1_score_indel', models.FloatField()),
                ('truth_total_titv_ratio_indel', models.FloatField(null=True)),
                ('query_total_titv_ratio_indel', models.FloatField(null=True)),
                ('truth_total_het_hom_ratio_indel', models.FloatField()),
                ('query_total_het_hom_ratio_indel', models.FloatField()),
            ],
            options={
                'db_table': 'happy_indel_all',
            },
        ),
        migrations.CreateModel(
            name='Happy_indel_pass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_indel', models.CharField(max_length=10)),
                ('truth_total_indel', models.IntegerField()),
                ('truth_tp_indel', models.IntegerField()),
                ('truth_fn_indel', models.IntegerField()),
                ('query_total_indel', models.IntegerField()),
                ('query_fp_indel', models.IntegerField()),
                ('query_unk_indel', models.IntegerField()),
                ('fp_gt_indel', models.IntegerField()),
                ('metric_recall_indel', models.FloatField()),
                ('metric_precision_indel', models.FloatField()),
                ('metric_frac_na_indel', models.FloatField()),
                ('metric_f1_score_indel', models.FloatField()),
                ('truth_total_titv_ratio_indel', models.FloatField(null=True)),
                ('query_total_titv_ratio_indel', models.FloatField(null=True)),
                ('truth_total_het_hom_ratio_indel', models.FloatField()),
                ('query_total_het_hom_ratio_indel', models.FloatField()),
            ],
            options={
                'db_table': 'happy_indel_pass',
            },
        ),
        migrations.CreateModel(
            name='Happy_snp_all',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_snp', models.CharField(max_length=10)),
                ('truth_total_snp', models.IntegerField()),
                ('truth_tp_snp', models.IntegerField()),
                ('truth_fn_snp', models.IntegerField()),
                ('query_total_snp', models.IntegerField()),
                ('query_fp_snp', models.IntegerField()),
                ('query_unk_snp', models.IntegerField()),
                ('fp_gt_snp', models.IntegerField()),
                ('metric_recall_snp', models.FloatField()),
                ('metric_precision_snp', models.FloatField()),
                ('metric_frac_na_snp', models.FloatField()),
                ('metric_f1_score_snp', models.FloatField()),
                ('truth_total_titv_ratio_snp', models.FloatField(null=True)),
                ('query_total_titv_ratio_snp', models.FloatField(null=True)),
                ('truth_total_het_hom_ratio_snp', models.FloatField()),
                ('query_total_het_hom_ratio_snp', models.FloatField()),
            ],
            options={
                'db_table': 'happy_snp_all',
            },
        ),
        migrations.CreateModel(
            name='Happy_snp_pass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_snp', models.CharField(max_length=10)),
                ('truth_total_snp', models.IntegerField()),
                ('truth_tp_snp', models.IntegerField()),
                ('truth_fn_snp', models.IntegerField()),
                ('query_total_snp', models.IntegerField()),
                ('query_fp_snp', models.IntegerField()),
                ('query_unk_snp', models.IntegerField()),
                ('fp_gt_snp', models.IntegerField()),
                ('metric_recall_snp', models.FloatField()),
                ('metric_precision_snp', models.FloatField()),
                ('metric_frac_na_snp', models.FloatField()),
                ('metric_f1_score_snp', models.FloatField()),
                ('truth_total_titv_ratio_snp', models.FloatField(null=True)),
                ('query_total_titv_ratio_snp', models.FloatField(null=True)),
                ('truth_total_het_hom_ratio_snp', models.FloatField()),
                ('query_total_het_hom_ratio_snp', models.FloatField()),
            ],
            options={
                'db_table': 'happy_snp_pass',
            },
        ),
        migrations.CreateModel(
            name='HS_metrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bait_set', models.CharField(max_length=10)),
                ('bait_territory', models.FloatField()),
                ('bait_design_efficiency', models.FloatField()),
                ('on_bait_bases', models.FloatField()),
                ('near_bait_bases', models.FloatField()),
                ('off_bait_bases', models.FloatField()),
                ('pct_selected_bases', models.FloatField()),
                ('pct_off_bait', models.FloatField()),
                ('on_bait_vs_selected', models.FloatField(null=True)),
                ('mean_bait_coverage', models.FloatField()),
                ('pct_usable_bases_on_bait', models.FloatField()),
                ('pct_usable_bases_on_target', models.FloatField()),
                ('fold_enrichment', models.FloatField()),
                ('hs_library_size', models.FloatField(null=True)),
                ('hs_penalty_10x', models.FloatField()),
                ('hs_penalty_20x', models.FloatField()),
                ('hs_penalty_30x', models.FloatField()),
                ('hs_penalty_40x', models.FloatField()),
                ('hs_penalty_50x', models.FloatField()),
                ('hs_penalty_100x', models.FloatField()),
                ('target_territory', models.FloatField()),
                ('genome_size', models.FloatField()),
                ('total_reads', models.FloatField()),
                ('pf_reads', models.FloatField()),
                ('pf_bases', models.FloatField()),
                ('pf_unique_reads', models.FloatField()),
                ('pf_uq_reads_aligned', models.FloatField()),
                ('pf_bases_aligned', models.FloatField()),
                ('pf_uq_bases_aligned', models.FloatField()),
                ('on_target_bases', models.FloatField()),
                ('pct_pf_reads', models.FloatField()),
                ('pct_pf_uq_reads', models.FloatField()),
                ('pct_pf_uq_reads_aligned', models.FloatField()),
                ('mean_target_coverage', models.FloatField()),
                ('median_target_coverage', models.FloatField()),
                ('max_target_coverage', models.FloatField()),
                ('min_target_coverage', models.FloatField()),
                ('zero_cvg_targets_pct', models.FloatField()),
                ('pct_exc_dupe', models.FloatField()),
                ('pct_exc_adapter', models.FloatField()),
                ('pct_exc_mapq', models.FloatField()),
                ('pct_exc_baseq', models.FloatField()),
                ('pct_exc_overlap', models.FloatField()),
                ('pct_exc_off_target', models.FloatField()),
                ('fold_80_base_penalty', models.FloatField(null=True)),
                ('pct_target_bases_1x', models.FloatField()),
                ('pct_target_bases_2x', models.FloatField()),
                ('pct_target_bases_10x', models.FloatField()),
                ('pct_target_bases_20x', models.FloatField()),
                ('pct_target_bases_30x', models.FloatField()),
                ('pct_target_bases_40x', models.FloatField()),
                ('pct_target_bases_50x', models.FloatField()),
                ('pct_target_bases_100x', models.FloatField()),
                ('at_dropout', models.FloatField()),
                ('gc_dropout', models.FloatField()),
                ('het_snp_sensitivity', models.FloatField()),
                ('het_snp_q', models.FloatField()),
            ],
            options={
                'db_table': 'hs_metrics',
            },
        ),
        migrations.CreateModel(
            name='Insert_size_metrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('median_insert_size', models.FloatField()),
                ('mode_insert_size', models.FloatField(null=True)),
                ('median_absolute_deviation', models.FloatField()),
                ('min_insert_size', models.FloatField()),
                ('max_insert_size', models.FloatField()),
                ('mean_insert_size', models.FloatField()),
                ('standard_deviation', models.FloatField(null=True)),
                ('read_pairs', models.FloatField()),
                ('pair_orientation', models.CharField(max_length=10)),
                ('width_of_10_pct', models.FloatField()),
                ('width_of_20_pct', models.FloatField()),
                ('width_of_30_pct', models.FloatField()),
                ('width_of_40_pct', models.FloatField()),
                ('width_of_50_pct', models.FloatField()),
                ('width_of_60_pct', models.FloatField()),
                ('width_of_70_pct', models.FloatField()),
                ('width_of_80_pct', models.FloatField()),
                ('width_of_90_pct', models.FloatField()),
                ('width_of_99_pct', models.FloatField()),
            ],
            options={
                'db_table': 'insert_size_metrics',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gm_number', models.CharField(max_length=20)),
                ('sex', models.CharField(max_length=1)),
            ],
            options={
                'db_table': 'patient',
            },
        ),
        migrations.CreateModel(
            name='PCR_metrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_amplicon_set', models.CharField(max_length=20)),
                ('amplicon_territory', models.FloatField()),
                ('on_amplicon_bases', models.FloatField()),
                ('near_amplicon_bases', models.FloatField()),
                ('off_amplicon_bases', models.FloatField()),
                ('pct_amplified_bases', models.FloatField()),
                ('pct_off_amplicon', models.FloatField()),
                ('on_amplicon_vs_selected', models.FloatField(null=True)),
                ('mean_amplicon_cov', models.FloatField()),
                ('fold_enrichment', models.FloatField()),
                ('pf_selected_pairs', models.FloatField()),
                ('pf_selected_unique_pairs', models.FloatField()),
                ('on_target_from_pair_bases', models.FloatField()),
                ('target_territory', models.FloatField()),
                ('genome_size', models.FloatField()),
                ('total_reads', models.FloatField()),
                ('pf_reads', models.FloatField()),
                ('pf_bases', models.FloatField()),
                ('pf_unique_reads', models.FloatField()),
                ('pf_uq_reads_aligned', models.FloatField()),
                ('pf_bases_aligned', models.FloatField()),
                ('pf_uq_bases_aligned', models.FloatField()),
                ('on_target_bases', models.FloatField()),
                ('pct_pf_reads', models.FloatField()),
                ('pct_pf_uq_reads', models.FloatField()),
                ('pct_pf_uq_reads_aligned', models.FloatField()),
                ('mean_target_cov', models.FloatField()),
                ('median_target_cov', models.FloatField()),
                ('max_target_cov', models.FloatField()),
                ('min_target_cov', models.FloatField()),
                ('zero_cvg_targets_pct', models.FloatField()),
                ('pct_exc_dupe', models.FloatField()),
                ('pct_exc_adapter', models.FloatField()),
                ('pct_exc_mapq', models.FloatField()),
                ('pct_exc_baseq', models.FloatField()),
                ('pct_exc_overlap', models.FloatField()),
                ('pct_exc_off_target', models.FloatField()),
                ('fold_80_base_penalty', models.FloatField(null=True)),
                ('pct_target_bases_1x', models.FloatField()),
                ('pct_target_bases_2x', models.FloatField()),
                ('pct_target_bases_10x', models.FloatField()),
                ('pct_target_bases_20x', models.FloatField()),
                ('pct_target_bases_30x', models.FloatField()),
                ('pct_target_bases_40x', models.FloatField()),
                ('pct_target_bases_50x', models.FloatField()),
                ('pct_target_bases_100x', models.FloatField()),
                ('at_dropout', models.FloatField()),
                ('gc_dropout', models.FloatField()),
                ('het_snp_sensitivity', models.FloatField()),
                ('het_snp_q', models.FloatField()),
            ],
            options={
                'db_table': 'pcr_metrics',
            },
        ),
        migrations.CreateModel(
            name='Picard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alignment_summary_metrics', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.alignment_summary_metrics')),
                ('base_distribution_by_cycle_metrics_1st_lane_R1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='base_distribution_by_cycle_metrics_1st_lane_R1', to='trend_monitoring.base_distribution_by_cycle_metrics')),
                ('base_distribution_by_cycle_metrics_1st_lane_R2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='base_distribution_by_cycle_metrics_1st_lane_R2', to='trend_monitoring.base_distribution_by_cycle_metrics')),
                ('base_distribution_by_cycle_metrics_2nd_lane_R1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='base_distribution_by_cycle_metrics_2nd_lane_R1', to='trend_monitoring.base_distribution_by_cycle_metrics')),
                ('base_distribution_by_cycle_metrics_2nd_lane_R2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='base_distribution_by_cycle_metrics_2nd_lane_R2', to='trend_monitoring.base_distribution_by_cycle_metrics')),
                ('duplication_metrics', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.duplication_metrics')),
                ('gc_bias_metrics', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.gc_bias_metrics')),
                ('hs_metrics', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.hs_metrics')),
                ('insert_size_metrics', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.insert_size_metrics')),
                ('pcr_metrics', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.pcr_metrics')),
            ],
            options={
                'db_table': 'picard',
            },
        ),
        migrations.CreateModel(
            name='Quality_yield_metrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_reads', models.IntegerField()),
                ('pf_reads', models.IntegerField()),
                ('read_length', models.IntegerField()),
                ('total_bases', models.IntegerField()),
                ('pf_bases', models.IntegerField()),
                ('q20_bases', models.IntegerField()),
                ('pf_q20_bases', models.IntegerField()),
                ('q30_bases', models.IntegerField()),
                ('pf_q30_bases', models.IntegerField()),
                ('q20_equivalent_yield', models.FloatField()),
                ('pf_q20_equivalent_yield', models.FloatField()),
            ],
            options={
                'db_table': 'quality_yield_metrics',
            },
        ),
        migrations.CreateModel(
            name='Read_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_read', models.CharField(blank=True, max_length=50)),
                ('lane', models.CharField(blank=True, max_length=20)),
                ('file_type', models.CharField(max_length=50)),
                ('encoding', models.CharField(max_length=50)),
                ('total_sequences', models.FloatField()),
                ('sequences_flagged_as_poor_quality', models.FloatField()),
                ('sequence_length', models.CharField(max_length=20)),
                ('gc_pct', models.FloatField()),
                ('total_deduplicated_pct', models.FloatField()),
                ('avg_sequence_length', models.FloatField()),
                ('basic_statistics', models.CharField(max_length=10)),
                ('per_base_sequence_quality', models.CharField(max_length=10)),
                ('per_tile_sequence_quality', models.CharField(max_length=10, null=True)),
                ('per_sequence_quality_scores', models.CharField(max_length=10)),
                ('per_base_sequence_content', models.CharField(max_length=10)),
                ('per_sequence_gc_content', models.CharField(max_length=10)),
                ('per_base_n_content', models.CharField(max_length=10)),
                ('sequence_length_distribution', models.CharField(max_length=10)),
                ('sequence_duplication_levels', models.CharField(max_length=10)),
                ('overrepresented_sequences', models.CharField(max_length=10)),
                ('adapter_content', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'fastqc_data',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('project_id', models.CharField(max_length=50)),
                ('project_name', models.CharField(max_length=500)),
                ('dnanexus_file_id', models.CharField(max_length=62)),
                ('sequencer_id', models.CharField(max_length=20)),
                ('date', models.DateField()),
                ('job_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'report',
            },
        ),
        migrations.CreateModel(
            name='Samtools_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_passed', models.IntegerField(null=True)),
                ('total_failed', models.IntegerField(null=True)),
                ('secondary_passed', models.IntegerField(null=True)),
                ('secondary_failed', models.IntegerField(null=True)),
                ('supplementary_passed', models.IntegerField(null=True)),
                ('supplementary_failed', models.IntegerField(null=True)),
                ('duplicates_passed', models.IntegerField(null=True)),
                ('duplicates_failed', models.IntegerField(null=True)),
                ('mapped_passed', models.IntegerField(null=True)),
                ('mapped_failed', models.IntegerField(null=True)),
                ('mapped_passed_pct', models.FloatField(null=True)),
                ('mapped_failed_pct', models.FloatField(null=True)),
                ('paired_in_sequencing_passed', models.IntegerField(null=True)),
                ('paired_in_sequencing_failed', models.IntegerField(null=True)),
                ('r1_passed', models.IntegerField(null=True)),
                ('r1_failed', models.IntegerField(null=True)),
                ('r2_passed', models.IntegerField(null=True)),
                ('r2_failed', models.IntegerField(null=True)),
                ('properly_paired_passed', models.IntegerField(null=True)),
                ('properly_paired_failed', models.IntegerField(null=True)),
                ('properly_paired_passed_pct', models.FloatField(null=True)),
                ('properly_paired_failed_pct', models.FloatField(null=True)),
                ('with_itself_and_mate_mapped_passed', models.IntegerField(null=True)),
                ('with_itself_and_mate_mapped_failed', models.IntegerField(null=True)),
                ('singletons_passed', models.IntegerField(null=True)),
                ('singletons_failed', models.IntegerField(null=True)),
                ('singletons_passed_pct', models.FloatField(null=True)),
                ('singletons_failed_pct', models.FloatField(null=True)),
                ('with_mate_mapped_to_a_different_chr_passed', models.IntegerField(null=True)),
                ('with_mate_mapped_to_a_different_chr_failed', models.IntegerField(null=True)),
                ('with_mate_mapped_to_a_different_chr_mapQ_over_5_passed', models.IntegerField(null=True)),
                ('with_mate_mapped_to_a_different_chr_mapQ_over_5_failed', models.IntegerField(null=True)),
                ('flagstat_total', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'samtools_data',
            },
        ),
        migrations.CreateModel(
            name='Somalier_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paternal_id', models.CharField(max_length=50)),
                ('maternal_id', models.CharField(max_length=50)),
                ('family_id', models.CharField(max_length=100)),
                ('sex', models.FloatField()),
                ('phenotype', models.FloatField()),
                ('original_pedigree_sex', models.CharField(max_length=10)),
                ('gt_depth_mean', models.FloatField()),
                ('gt_depth_sd', models.FloatField(null=True)),
                ('depth_mean', models.FloatField()),
                ('depth_sd', models.FloatField()),
                ('ab_mean', models.FloatField()),
                ('ab_std', models.FloatField(null=True)),
                ('nb_hom_ref', models.FloatField()),
                ('nb_het', models.FloatField()),
                ('nb_hom_alt', models.FloatField()),
                ('nb_unknown', models.FloatField()),
                ('p_middling_ab', models.FloatField()),
                ('x_depth_mean', models.FloatField()),
                ('x_nb', models.FloatField()),
                ('x_hom_ref', models.FloatField()),
                ('x_het', models.FloatField()),
                ('x_hom_alt', models.FloatField()),
                ('y_depth_mean', models.FloatField()),
                ('y_nb', models.FloatField()),
                ('predicted_sex', models.CharField(max_length=10)),
                ('match_sexes', models.CharField(max_length=5, null=True)),
            ],
            options={
                'db_table': 'somalier_data',
            },
        ),
        migrations.CreateModel(
            name='Sompy_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('indels_total_truth', models.FloatField()),
                ('indels_total_query', models.FloatField()),
                ('indels_tp', models.FloatField()),
                ('indels_fp', models.FloatField()),
                ('indels_fn', models.FloatField()),
                ('indels_unk', models.FloatField()),
                ('indels_ambi', models.FloatField()),
                ('indels_recall', models.FloatField()),
                ('indels_recall_lower', models.FloatField()),
                ('indels_recall_upper', models.FloatField()),
                ('indels_recall2', models.FloatField()),
                ('indels_precision', models.FloatField()),
                ('indels_precision_lower', models.FloatField()),
                ('indels_precision_upper', models.FloatField()),
                ('indels_na', models.FloatField()),
                ('indels_ambiguous', models.FloatField()),
                ('indels_fp_region_size', models.FloatField()),
                ('indels_fp_rate', models.FloatField()),
                ('snvs_total_truth', models.FloatField()),
                ('snvs_total_query', models.FloatField()),
                ('snvs_tp', models.FloatField()),
                ('snvs_fp', models.FloatField()),
                ('snvs_fn', models.FloatField()),
                ('snvs_unk', models.FloatField()),
                ('snvs_ambi', models.FloatField()),
                ('snvs_recall', models.FloatField()),
                ('snvs_recall_lower', models.FloatField()),
                ('snvs_recall_upper', models.FloatField()),
                ('snvs_recall2', models.FloatField()),
                ('snvs_precision', models.FloatField()),
                ('snvs_precision_lower', models.FloatField()),
                ('snvs_precision_upper', models.FloatField()),
                ('snvs_na', models.FloatField()),
                ('snvs_ambiguous', models.FloatField()),
                ('snvs_fp_region_size', models.FloatField()),
                ('snvs_fp_rate', models.FloatField()),
                ('records_total_truth', models.FloatField()),
                ('records_total_query', models.FloatField()),
                ('records_tp', models.FloatField()),
                ('records_fp', models.FloatField()),
                ('records_fn', models.FloatField()),
                ('records_unk', models.FloatField()),
                ('records_ambi', models.FloatField()),
                ('records_recall', models.FloatField()),
                ('records_recall_lower', models.FloatField()),
                ('records_recall_upper', models.FloatField()),
                ('records_recall2', models.FloatField()),
                ('records_precision', models.FloatField()),
                ('records_precision_lower', models.FloatField()),
                ('records_precision_upper', models.FloatField()),
                ('records_na', models.FloatField()),
                ('records_ambiguous', models.FloatField()),
                ('records_fp_region_size', models.FloatField()),
                ('records_fp_rate', models.FloatField()),
            ],
            options={
                'db_table': 'sompy_data',
            },
        ),
        migrations.CreateModel(
            name='Vcfqc_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mean_het_ratio', models.FloatField()),
                ('mean_hom_ratio', models.FloatField()),
                ('het_hom_ratio', models.FloatField()),
                ('x_hom_het_ratio', models.FloatField()),
                ('gender', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'vcfqc_data',
            },
        ),
        migrations.CreateModel(
            name='VerifyBAMid_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rg', models.CharField(max_length=10)),
                ('chip_id', models.CharField(max_length=10, null=True)),
                ('nb_snps', models.IntegerField()),
                ('nb_reads', models.IntegerField()),
                ('avg_dp', models.FloatField()),
                ('freemix', models.FloatField()),
                ('freelk1', models.FloatField()),
                ('freelk0', models.FloatField()),
                ('free_rh', models.CharField(max_length=10, null=True)),
                ('free_ra', models.CharField(max_length=10, null=True)),
                ('chipmix', models.CharField(max_length=10, null=True)),
                ('chiplk1', models.CharField(max_length=10, null=True)),
                ('chiplk0', models.CharField(max_length=10, null=True)),
                ('chip_rh', models.CharField(max_length=10, null=True)),
                ('chip_ra', models.CharField(max_length=10, null=True)),
                ('dpref', models.CharField(max_length=10, null=True)),
                ('rdphet', models.CharField(max_length=10, null=True)),
                ('rdpalt', models.CharField(max_length=10, null=True)),
            ],
            options={
                'db_table': 'verifybamid_data',
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_id', models.CharField(max_length=100)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.patient')),
            ],
            options={
                'db_table': 'sample',
            },
        ),
        migrations.CreateModel(
            name='Report_Sample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assay', models.CharField(max_length=50)),
                ('bcl2fastq_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.bcl2fastq_data')),
                ('custom_coverage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.custom_coverage')),
                ('fastqc', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.fastqc')),
                ('happy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.happy')),
                ('picard', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.picard')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.report')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.sample')),
                ('samtools_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.samtools_data')),
                ('somalier_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.somalier_data')),
                ('sompy_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.sompy_data')),
                ('vcfqc_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.vcfqc_data')),
                ('verifybamid_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.verifybamid_data')),
            ],
            options={
                'db_table': 'report_sample',
            },
        ),
        migrations.AddField(
            model_name='picard',
            name='quality_yield_metrics',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.quality_yield_metrics'),
        ),
        migrations.AddField(
            model_name='happy',
            name='happy_indel_all',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.happy_indel_all'),
        ),
        migrations.AddField(
            model_name='happy',
            name='happy_indel_pass',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.happy_indel_pass'),
        ),
        migrations.AddField(
            model_name='happy',
            name='happy_snp_all',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.happy_snp_all'),
        ),
        migrations.AddField(
            model_name='happy',
            name='happy_snp_pass',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='trend_monitoring.happy_snp_pass'),
        ),
        migrations.AddField(
            model_name='fastqc',
            name='read_data_1st_lane_R1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='read_data_1st_lane_R1', to='trend_monitoring.read_data'),
        ),
        migrations.AddField(
            model_name='fastqc',
            name='read_data_1st_lane_R2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='read_data_1st_lane_R2', to='trend_monitoring.read_data'),
        ),
        migrations.AddField(
            model_name='fastqc',
            name='read_data_2nd_lane_R1',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='read_data_2nd_lane_R1', to='trend_monitoring.read_data'),
        ),
        migrations.AddField(
            model_name='fastqc',
            name='read_data_2nd_lane_R2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='read_data_2nd_lane_R2', to='trend_monitoring.read_data'),
        ),
    ]

# resources:
# http://www.ameyalokare.com/docker/2017/09/20/nginx-flask-postgres-docker-compose.html
# https://github.com/juggernaut/nginx-flask-postgres-docker-compose-example
# https://serverfault.com/questions/783806/docker-how-to-django-uwsgi-gunicorn-nginx/787402
# https://github.com/andrecp/django-tutorial-docker-nginx-postgres
# https://github.com/realpython/dockerizing-django
# http://ruddra.com/2016/08/14/docker-django-nginx-postgres/index.html
# https://stackoverflow.com/questions/32180589/docker-how-to-expose-a-socket-over-a-port-for-a-django-application

version: '3'

services:
  # database containers, one for each db
  db:
    container_name: trendyqc_db
    image: postgres:15.2
    volumes:
      - db:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB

  # web container, with django + gunicorn
  trendyqc:
    container_name: trendyqc
    build: .
    image: trendyqc:1.0
    environment:
      - DJANGO_SETTINGS_MODULE
      - DNANEXUS_TOKEN
      - TRENDYQC_SECRET_KEY
      - DB_NAME
      - DB_USER
      - DB_PASSWORD
      - HOST
      - SLACK_TOKEN
      - SLACK_LOG_CHANNEL
      - SLACK_ALERT_CHANNEL
      - BIND_DN
      - BIND_PASSWORD
      - AUTH_LDAP_SERVER_URI
      - LDAP_CONF
      - DEBUG
    expose:
      - 8006
    volumes:
      - static:/app/trendyqc/staticfiles
      - /var/log/monitoring:/app/trendyqc/grafana
    depends_on:
      - db

  # reverse proxy container (nginx)
  nginx:
    container_name: trendyqc_proxy
    ports:
      - 8008:80
    image: nginx:1.23
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - static:/staticfiles/
    environment:
      - VIRTUAL_HOST
      - VIRTUAL_PATH
    expose:
      - 8008
    depends_on:
      - trendyqc

networks:
  default:
    name: nginx_default
    external: true

volumes:
  db:
  static:
